.idea/
.vscode/

# ------------------------------------------ Python
# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
# .python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# poetry
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock

# pdm
#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
#pdm.lock
#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it
#   in version control.
#   https://pdm.fming.dev/#use-with-ide
.pdm.toml

# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# Cython debug symbols
cython_debug/


# ----------------------------------------- Java
# Compiled class file
*.class

# Log file
*.log

# BlueJ files
*.ctxt

# Mobile Tools for Java (J2ME)
.mtj.tmp/

# Package Files #
*.jar
*.war
*.nar
*.ear
*.zip
*.tar.gz
*.rar

# virtual machine crash logs, see http://www.java.com/en/download/help/error_hotspot.xml
hs_err_pid*
replay_pid*


# ----------------------------------------- Lua 

# Compiled Lua sources
luac.out

deps/

gateway.json

# luarocks build files
*.src.rock
*.zip
*.tar.gz

# Object files
*.o
*.os
*.ko
*.obj
*.elf

# Precompiled Headers
*.gch
*.pch

# Libraries
*.lib
*.a
*.la
*.lo
*.def
*.exp

# Shared objects (inc. Windows DLLs)
*.dll
*.so
*.so.*
*.dylib

# Executables
*.exe
*.out
*.app
*.i*86
*.x86_64
*.hex

# ----------------------------------------- PHP

# Ignore Composer files
composer.phar
composer.lock
vendor/

# Ignore environment configuration files
/.env
/.env.local
/.env.*.local

# PHPStorm project files
.idea/

# Ignore typical cache and log files
/cache/
/logs/
/log/
/tmp/

# Ignore user uploaded files (if applicable)
/uploads/

# Node modules if using Node.js in the project
/node_modules/

# Ignore specific config files that might contain sensitive data
/config/*.php

# Operating system files
.DS_Store
Thumbs.db

# Ignore export directories
/export/

# Ignore specific directories that may contain build artifacts
/build/
/releases/

# Ignore PHPUnit test cache and coverage reports
/phpunit.xml
.phpunit.result.cache
/coverage/

# If using Laravel, you might want to exclude these as well
/storage/
/bootstrap/cache/
/public/storage
/vendor/
Homestead.json
Homestead.yaml
.env.backup
/.php_cs.cache
/.vagrant/
.vagrant/

# If using WordPress, ignore these common folders and files
/wp-content/debug.log
/wp-content/uploads/
/wp-content/upgrade/
/wp-content/backup-db/
/wp-content/advanced-cache.php
/wp-content/wp-cache-config.php
/wp-content/cache/
/wp-content/backups/

# SASS source files if using SASS/SCSS
*.scssc
*.sassc
.sass-cache

# If using Bower
/bower_components/

# Ignore the Composer binary
/composer.phar

# If using Symfony, exclude these directories and files
/var/
/var/cache/
/var/logs/
/var/sessions/
!var/cache/.gitkeep
!var/logs/.gitkeep
!var/sessions/.gitkeep
